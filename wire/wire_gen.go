// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"bit-image/internal/postrges"
	"bit-image/internal/s3"
	"bit-image/pkg/handlers"
	"bit-image/pkg/services"
	"bit-image/pkg/storage/image"
	"github.com/google/wire"
)

// Injectors from wire.go:

// Injector functions
// InitializeImageHandler initializes the ImageHandler.
func InitializeImageHandler() (*handlers.ImageHandler, error) {
	connectionHandler, err := postrges.NewConnectionHandler()
	if err != nil {
		return nil, err
	}
	imageStore := image.NewImageStore(connectionHandler)
	client, err := s3.NewS3Client()
	if err != nil {
		return nil, err
	}
	s3FileSystem := s3.NewS3FileSystem(client)
	handler := s3.NewHandler(s3FileSystem)
	imageService := services.NewImageService(imageStore, handler)
	imageHandler := handlers.NewImageHandler(imageService)
	return imageHandler, nil
}

// wire.go:

// Provider sets for different components
var DataStoreProviderSet = wire.NewSet(postrges.ProviderSet, image.ProviderSet, s3.ProviderSet)

var ServiceProviderSet = wire.NewSet(services.ProviderSet)

var HandlerProviderSet = wire.NewSet(handlers.ProviderSet)

// Aggregate provider set
var AppProviderSet = wire.NewSet(
	DataStoreProviderSet,
	ServiceProviderSet,
	HandlerProviderSet,
)
